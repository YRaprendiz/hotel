Rendre ce texte d instructions plus compréhensible mais toujour dans le format de paragraph:


"Créez un projet web intégrant deux types d utilisateurs : administrateurs et clients jai deja code la page utilisateur model et la base SQL et index, continuer a coder le project dans le sence inverse du mvc. 
Ce projet doit comporter une barre de navigation (navbar) qui inclut les pages suivantes controler par une Index :  Accueil, hotel , Profil(si loguin est client)/Tous les utilisateurs(si loguin est admin), Inscription (si non connecte) et Connexion(si non loguin) Deconection(si loguin). 
 Le développement doit suivre le modèle MVC (Modèle-Vue-Contrôleur). Lorsqu un utilisateur sans compte entre dans le cide atracersa de la page accueil il a la option de  se inscrit via la page Inscription, 
 ses informations doivent être enregistrées dans une base de données SQL appelée 'hc', hébergée sur un serveur local Apache. 
 Une fois inscrit, l utilisateur peut se connecter via la page Connexion en utilisant son email et son mot de passe.
 Après la connexion,  le comportement dépend du rôle de l utilisateur : 
 un client est redirigé vers une page Profil où il peut modifier ses informations  personnelles et ses reserve de chambre, 
 tandis qu un administrateur accède à une page Tous les utilisateurs et aussi une page touts les chambre ou il peut modifier e ajjouter les chambres de hotel de la base SQL hc. Cette page affiche une liste de tous les utilisateurs et ses reserve de chambre  via une requête SQL, et l administrateur peut également y modifier les informations des utilisateurs enregistrées dans la base de données. 
 Pour les utilisateurs connectés (client ou administrateur), un bouton Déconnexion doit apparaître dans la navbar pour permettre la  déconnexion.
 La page Accueil doit présenter une image de l hôtel et inclure la barre de navigation, 
  La page Accueil doit hotel doit presenter parmi une requete les chambres qui list de hotel de la base de donne et une pouton pour voir les details de chaque chambre et dans le page details le client  peut reserver la chambre selectione,
 tandis que la page Index doit  centraliser la gestion des adresses et redirections des différentes pages du projet. 
 Enfin, l utilisation de  Bootstrap est recommandée pour le design et la mise en page."
📁 hotel002/
├── 📁 bdd/
│   └script 
├── 📁 controllers/
│   ├utilisateurController.php
│   └chambresController.php
├── 📁 models/
│   ├ chambresModel
│   └utilisateurModel
├── 📁 views/
│   ├─ includes/
│   │  footer.php
│   │  header.php
│   ├─ admin/
│   │   └ toutsClients 'edit et anuller reservations de clients'
│   │   └ toutsChambres 'edit et ajouter les chambres'
│   ├ utilisateur/
│   │   ├ login.php
│   │   └ register.php 'si le client na pqs de compte il peut creer une ici'
│   ├chambres
│   │  ├ chambres.php
│   ├──📁/views/utilisateur/client/
│   │   ├logout.php
│   │   ├ profile.php client 'peut modifier son propre profile ici et voir les reservations'
│   ├─contact.php 'comantaire si connecter si nom afiches toutes le comentair divise par chambres'
│   └──accueil.php
├── 📁 public/'bootstrap ici'
└── 📄 index.php

/bdd/"script SQL pour la criationbase de donnes hotel_ch "
        CREATE DATABASE IF NOT EXISTS hc;
        CREATE TABLE IF NOT EXISTS roles (
            id_roles INT AUTO_INCREMENT PRIMARY KEY,
            role_name VARCHAR(50) NOT NULL UNIQUE
        );
        INSERT INTO roles (role_name) VALUES ('client'), ('admin');
        -- Table pour les utilisateurs
        CREATE TABLE IF NOT EXISTS utilisateurs (
            id_utilisateur INT AUTO_INCREMENT PRIMARY KEY,
            nom VARCHAR(100) NOT NULL,
            prenom VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL UNIQUE,
            pass VARCHAR(255) NOT NULL,
            adress TEXT(255) NOT NULL,
            role_id INT NOT NULL,
            created_at int NOT NULL,
            FOREIGN KEY (role_id) REFERENCES roles(id)
        );
        CREATE TABLE IF NOT EXISTS chambres (
            id_chambre INT AUTO_INCREMENT PRIMARY KEY,
            chambres_number VARCHAR(10) NOT NULL UNIQUE,
            chambres_type VARCHAR(50) NOT NULL,  -- Par exemple : Simple, Double, Suite
            prix DECIMAL(10, 2) NOT NULL,   -- Prix par nuit
            description TEXT,
            status ENUM('available', 'booked', 'maintenance') DEFAULT 'available'
        );
        CREATE TABLE IF NOT EXISTS reservations (
            id_reservation INT AUTO_INCREMENT PRIMARY KEY,
            client_id INT NOT NULL,
            client_room_id INT NOT NULL,
            check_in DATE NOT NULL,
            check_out DATE NOT NULL,
            status ENUM('confirmed', 'canceled', 'completed') DEFAULT 'confirmed',
            FOREIGN KEY (client_id) REFERENCES utilisateurs(id_utilisateurs),
            FOREIGN KEY (client_room_id) REFERENCES chambres(id_chambres)
        );

        CREATE TABLE IF NOT EXISTS payments (
            id_payment INT AUTO_INCREMENT PRIMARY KEY,
        reservations_id INT NOT NULL,
            payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            amount DECIMAL(10, 2) NOT NULL,
            payment_method ENUM('credit_card', 'paypal', 'bank_transfer','espece') NOT NULL,
            status ENUM('paid', 'pending', 'failed') DEFAULT 'pending',
            FOREIGN KEY (reservations_id) REFERENCES reservations(id_reservations)
        );
        CREATE TABLE IF NOT EXISTS commentaires (
            id_commentaire INT AUTO_INCREMENT PRIMARY KEY,
            user_id_commentaires INT NOT NULL,
            room_id_commentaires INT NOT NULL,
            review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),  -- Note de 1 à 5
            comment TEXT,
            FOREIGN KEY (user_id_commentaire) REFERENCES utilisateurs(id_utilisateur),
            FOREIGN KEY (room_id_commentaire) REFERENCES chambres(id_chambre)
        );
/models/utilisateur/Model  
    "<?php
    class Utilisateur
    {private $connexion_hc;
    public function __construct($connexion_hc)
        {$this->connexion_hc = $connexion_hc;}
    // Inscription d un nouvel utilisateur
        public function register($nom, $prenom, $email, $pass, $telephone)
    	{try{$req = $this->connexion_hc->prepare("INSERT INTO utilisateurs (nom, prenom, email, pass, adress) VALUES (:nom, :prenom, :email, :pass, :adress)");
                    /** Hash du mot de passe
                     * $hashed_password = password_hash($this->password, PASSWORD_BCRYPT); */
    		$req->bindParam(':nom',$nom);
    		$req->bindParam(':prenom',$prenom);
    		$req->bindParam(':email',$email);
            $req->bindParam(':pass',$pass);
            $req->bindParam(':telephone',$telephone);
    		return $req->execute();
            }catch (PDOException $e) {
                // Gestion d erreur : Affichage dans les logs
                error_log("Erreur lors de l ajout d un utilisateur : " . $e->getMessage());
                return false;}}
            // Connexion utilisateur
            public function login($email, $password) {
            $stmt = $this->connexion_hc->prepare("SELECT * FROM utilisateurs WHERE email = :email");
            $stmt->execute(['email' => $email]);
            $user = $stmt->fetch();
            if ($user && $password === $user['pass']) {return $user; }
            return false; 
           // var_dump($stmt->fetch());
           // die;}
    // Récupérer tous les utilisateurs (pour l admin)
         public function getAll utilisateurss() {
            $query = "SELECT id_utilisateur, nom, prenom, email, role_id , created_at FROM utilisateurs";
            $stmt = $this->connexion_hc->prepare($query);
            $stmt->execute(); return $stmt->fetchAll();}
        public function updateUtilisateur($id,$dados){$query="UPDATE utilisateurs SET nom=:nom , prenom=:prenom , email=:email, pass=:pass ,adress=:adress WHERE id_utilisateur=:id_utilisateur";
            $stmt=$this->connexion_hc->prepare($query);
            $stmt->bindParam(':id_utilisateur',$id);
            $stmt->bindParam(':nom',$dados['nom']);
            $stmt->bindParam(':prenom',$dados['prenom']);
            $stmt->bindParam(':email',$dados['email']);
            $stmt->bindParam(':adress',$dados['adress']);
            return $stmt->execute();}
        //Supprimer un utilisateur par son identifiant.
    	public function supprimerUtilisateur($id_utilisateur)
    	{try {$req = $this->connexion_hc->prepare("DELETE FROM utilisateurs WHERE id_utilisateur = ?");
        return $req->execute([$id_utilisateur]);} catch (PDOException $e) {
                error_log("Erreur lors de la suppression de l utilisateur : " . $e->getMessage());
                return false;}}}?>"
/views/includes/header.php
    <?php session_start()?>
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Hotel HC</title>
        <!-- Ajout de Bootstrap -->
    </head><body><header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="index.php?page=accueil">Accueil Hotel</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav"> 
                    <li class="nav-item">
                            <a class="nav-link" href="index.php?page=chambres">nos chambres</a>
                        </li>                       
                        <li class="nav-item">
                            <a class="nav-link" href="index.php?page=inscription">Inscription</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="index.php?page=login">Connexion</a>
                        </li>
                        <li class="nav-item">
                                <a class="nav-link" href="index.php?page=contact">Contact</a>
                            </li>
                        <!-- Afficher uniquement si l utilisateur est connecté -->
                        <?php if (isset($_SESSION['utilisateur'])): ?>
                            <li class="nav-item">
                                <a class="nav-link" href="index.php?page=chambres">Chambres</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="logout.php">Déconnexion</a>
                            </li>
                            <?php elseif (isset($_SESSION['utilisateur'])&& ($_SESSION['role']==['admin'])): ?>
                                <li class="nav-item">
                                <a class="nav-link" href="index.php?page=toutsClients">toutsClients</a>
                            </li>
                        </li>
                            <li class="nav-item">
                                <a class="nav-link" href="index.php?page=toutsChambres">toutsChambres</a>
                            </li>
                        <?php endif; ?>
                    </ul></div></div></nav></header>
index.php
    <?php
include("./bdd/connexion.php");
    public function logout() {
        session_unset();
        session_destroy();
        header("Location:  accueil.php");
        exit();
    }
    public function login($email, $pass) {
        $user = $this->user->login($email, $pass);

        if($user) {
            $_SESSION[' '] = $user[' '];
            $_SESSION[' '] = $user[' '];
            $_SESSION[' '] = $user[' '];
            if($user[' '] == 'admin') {
                header("Location: users-list.php");
            } else {
                header("Location: profile.php");
            }
            exit();
        } else {
            return "Email ou mot de passe incorrect";
        }
    }
    public function __construct() {
        $hotel_chat = new hotel_chat();
        $this->db = $hotel_chat->getConnection();
        $this->user = new User($this->db);
    }
    public function register($dados) {
        $this->user->nom = $dados['nom'];
        $this->user->prenom = $dados['prenom'];
        $this->user->email = $dados['email'];
        $this->user->pass = $dados['pass'];
        $this->user->adress = $dados['adress'];
        $this->user->role = 'client';
        if($this->user->register()) {
            header("Location: login.php?register=success");
            exit();
        } else {
            return "Erreur lors de l inscription";
        }
    }
    public static function isLoggedIn() {
        return isset($_SESSION['']);
    }
    public static function isAdmin() {
        return isset($_SESSION[' ']) && $_SESSION[' '] == 'admin';
    }
if (AuthController::isLoggedIn()) {
    if (AuthController::isAdmin()) {
        header("Location: toutsclient.php");
    } else {
        header("Location: profile.php");
    }
} else {
    header("Location: accueil.php");
}
exit();
?>
<?php include("header.php"); ?>

<?php
$page = isset($_GET['page']) ? $_GET['page'] : 'accueil';

switch ($page) {
    case 'resgister':
        include('register.php');
        break;

    case 'login':
        include('');
        break;

    case 'chambres':
        include('');
        break;

    case 'contact':
        include('');
        break;

    case 'profile':
        include('p');
        break;
        

    default:
        include('');
        break;
}?>
<?php include("footer.php"); ?>